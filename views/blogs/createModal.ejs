<button
  type="button"
  class="btn btn-primary w-auto ms-auto"
  data-bs-toggle="modal"
  data-bs-target="#createBlogModal"
  aria-haspopup="dialog"
  aria-controls="createBlogModal"
  aria-expanded="false"
>
  Create new blog
</button>

<div
  class="modal fade"
  id="createBlogModal"
  tabindex="-1"
  role="dialog"
  aria-labelledby="createBlogModalLabel"
  aria-modal="true"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <form
        action="/blogs/create"
        method="POST"
        enctype="multipart/form-data"
        id="create-blog-form"
        class="blog-form"
      >
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="createBlogModalLabel">
            Create a New Blog
          </h1>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close create blog modal"
          ></button>
        </div>

        <div class="modal-body">
          <div class="mb-3">
            <label for="title" class="form-label">Blog Title</label>
            <input
              type="text"
              class="form-control"
              id="title"
              name="title"
              maxlength="70"
              required
              aria-describedby="titleCharCount"
            />
            <span
              id="titleCharCount"
              class="form-text text-end d-block small text-muted"
              aria-live="polite"
              aria-atomic="true"
            ></span>
          </div>

          <div class="mb-3">
            <label for="body" class="form-label">Blog Body</label>
            <textarea
              class="form-control"
              id="body"
              name="body"
              rows="6"
              maxlength="5000"
              required
              aria-describedby="bodyCharCount"
            ></textarea>
            <span
              id="bodyCharCount"
              class="form-text text-end d-block small text-muted"
              aria-live="polite"
              aria-atomic="true"
            ></span>
          </div>

          <div class="mb-3">
            <label for="image" class="form-label">Image</label>
            <input type="file" class="form-control" id="image" name="image" />
          </div>

          <div class="mb-4">
            <label for="tags" class="form-label">Tags</label>
            <select
              class="form-select"
              name="tags"
              id="tags"
              multiple
              aria-label="Select up to five tags"
            ></select>
            <div class="tag-list" aria-live="polite"></div>
          </div>
        </div>

        <div class="modal-footer">
          <button type="submit" class="btn btn-primary w-100">Create</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  const getTags = async () => {
    try {
      const res = await fetch("/api/tags");
      if (!res.ok) throw new Error("Failed to fetch tags.");
      return (await res.json())?.tags ?? [];
    } catch (err) {
      console.error("Error occurred while fetching the tags!", err);
      return [];
    }
  };

  const createBlogModal = document.getElementById("createBlogModal");

  createBlogModal.addEventListener("show.bs.modal", async () => {
    const tags = await getTags();
    const tagsSelect = createBlogModal.querySelector("#tags");
    tagsSelect.innerHTML = ""; // Clear previous options

    tags.forEach((tag) => {
      const option = document.createElement("option");
      option.value = tag._id;
      option.textContent = tag.label;
      tagsSelect.appendChild(option);
    });

    if (!tagsSelect._choicesInstance) {
      createBlogModal._choicesInstance = new Choices(tagsSelect, {
        removeItemButton: true,
        placeholderValue: "Select up to five tags",
        searchPlaceholderValue: "Search tags",
        closeDropdownOnSelect: false,
        maxItemCount: 5,
        maxItemText: (maxItemCount) =>
          `You can select up to a maximum of ${maxItemCount} tags only.`,
      });
    } else {
      createBlogModal._choicesInstance.setChoices(
        tags.map((tag) => ({ value: tag._id, label: tag.label })),
        "value",
        "label",
        false
      );
    }
  });

  createBlogModal.addEventListener("hidden.bs.modal", () => {
    createBlogModal.querySelector("form").reset();
    document.getElementById("titleCharCount").textContent = "";
    document.getElementById("bodyCharCount").textContent = "";
    if (createBlogModal._choicesInstance) {
      createBlogModal._choicesInstance.clearStore();
    }
  });

  const bodyField = document.getElementById("body");
  bodyField.addEventListener("input", () => {
    const length = bodyField.value.length;
    document.getElementById("bodyCharCount").textContent = `${length}/5000`;
  });

  const titleField = document.getElementById("title");
  titleField.addEventListener("input", () => {
    const length = titleField.value.length;
    document.getElementById("titleCharCount").textContent = `${length}/70`;
  });
</script>
